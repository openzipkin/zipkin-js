//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.AnnotationType = {
  'BOOL' : 0,
  'BYTES' : 1,
  'I16' : 2,
  'I32' : 3,
  'I64' : 4,
  'DOUBLE' : 5,
  'STRING' : 6
};
var Endpoint = module.exports.Endpoint = function(args) {
  this.ipv4 = null;
  this.port = null;
  this.service_name = null;
  this.ipv6 = null;
  if (args) {
    if (args.ipv4 !== undefined && args.ipv4 !== null) {
      this.ipv4 = args.ipv4;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
    if (args.service_name !== undefined && args.service_name !== null) {
      this.service_name = args.service_name;
    }
    if (args.ipv6 !== undefined && args.ipv6 !== null) {
      this.ipv6 = args.ipv6;
    }
  }
};
Endpoint.prototype = {};
Endpoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ipv4 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.port = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.service_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ipv6 = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Endpoint.prototype.write = function(output) {
  output.writeStructBegin('Endpoint');
  if (this.ipv4 !== null && this.ipv4 !== undefined) {
    output.writeFieldBegin('ipv4', Thrift.Type.I32, 1);
    output.writeI32(this.ipv4);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I16, 2);
    output.writeI16(this.port);
    output.writeFieldEnd();
  }
  if (this.service_name !== null && this.service_name !== undefined) {
    output.writeFieldBegin('service_name', Thrift.Type.STRING, 3);
    output.writeString(this.service_name);
    output.writeFieldEnd();
  }
  if (this.ipv6 !== null && this.ipv6 !== undefined) {
    output.writeFieldBegin('ipv6', Thrift.Type.STRING, 4);
    output.writeBinary(this.ipv6);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Annotation = module.exports.Annotation = function(args) {
  this.timestamp = null;
  this.value = null;
  this.host = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.host !== undefined && args.host !== null) {
      this.host = new ttypes.Endpoint(args.host);
    }
  }
};
Annotation.prototype = {};
Annotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.host = new ttypes.Endpoint();
        this.host.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotation.prototype.write = function(output) {
  output.writeStructBegin('Annotation');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRUCT, 3);
    this.host.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BinaryAnnotation = module.exports.BinaryAnnotation = function(args) {
  this.key = null;
  this.value = null;
  this.annotation_type = null;
  this.host = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.annotation_type !== undefined && args.annotation_type !== null) {
      this.annotation_type = args.annotation_type;
    }
    if (args.host !== undefined && args.host !== null) {
      this.host = new ttypes.Endpoint(args.host);
    }
  }
};
BinaryAnnotation.prototype = {};
BinaryAnnotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.annotation_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.host = new ttypes.Endpoint();
        this.host.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BinaryAnnotation.prototype.write = function(output) {
  output.writeStructBegin('BinaryAnnotation');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.annotation_type !== null && this.annotation_type !== undefined) {
    output.writeFieldBegin('annotation_type', Thrift.Type.I32, 3);
    output.writeI32(this.annotation_type);
    output.writeFieldEnd();
  }
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRUCT, 4);
    this.host.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Span = module.exports.Span = function(args) {
  this.trace_id = null;
  this.name = null;
  this.id = null;
  this.parent_id = null;
  this.annotations = null;
  this.binary_annotations = null;
  this.debug = false;
  this.timestamp = null;
  this.duration = null;
  this.trace_id_high = null;
  if (args) {
    if (args.trace_id !== undefined && args.trace_id !== null) {
      this.trace_id = args.trace_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.parent_id !== undefined && args.parent_id !== null) {
      this.parent_id = args.parent_id;
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [ttypes.Annotation]);
    }
    if (args.binary_annotations !== undefined && args.binary_annotations !== null) {
      this.binary_annotations = Thrift.copyList(args.binary_annotations, [ttypes.BinaryAnnotation]);
    }
    if (args.debug !== undefined && args.debug !== null) {
      this.debug = args.debug;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    }
    if (args.trace_id_high !== undefined && args.trace_id_high !== null) {
      this.trace_id_high = args.trace_id_high;
    }
  }
};
Span.prototype = {};
Span.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.trace_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.parent_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.annotations = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Annotation();
          elem6.read(input);
          this.annotations.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.binary_annotations = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.BinaryAnnotation();
          elem13.read(input);
          this.binary_annotations.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.debug = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.duration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.trace_id_high = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Span.prototype.write = function(output) {
  output.writeStructBegin('Span');
  if (this.trace_id !== null && this.trace_id !== undefined) {
    output.writeFieldBegin('trace_id', Thrift.Type.I64, 1);
    output.writeI64(this.trace_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 4);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.parent_id !== null && this.parent_id !== undefined) {
    output.writeFieldBegin('parent_id', Thrift.Type.I64, 5);
    output.writeI64(this.parent_id);
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
    for (var iter14 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter14))
      {
        iter14 = this.annotations[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.binary_annotations !== null && this.binary_annotations !== undefined) {
    output.writeFieldBegin('binary_annotations', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.binary_annotations.length);
    for (var iter15 in this.binary_annotations)
    {
      if (this.binary_annotations.hasOwnProperty(iter15))
      {
        iter15 = this.binary_annotations[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.debug !== null && this.debug !== undefined) {
    output.writeFieldBegin('debug', Thrift.Type.BOOL, 9);
    output.writeBool(this.debug);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 10);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I64, 11);
    output.writeI64(this.duration);
    output.writeFieldEnd();
  }
  if (this.trace_id_high !== null && this.trace_id_high !== undefined) {
    output.writeFieldBegin('trace_id_high', Thrift.Type.I64, 12);
    output.writeI64(this.trace_id_high);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.CLIENT_SEND = 'cs';
ttypes.CLIENT_RECV = 'cr';
ttypes.SERVER_SEND = 'ss';
ttypes.SERVER_RECV = 'sr';
ttypes.MESSAGE_SEND = 'ms';
ttypes.MESSAGE_RECV = 'mr';
ttypes.WIRE_SEND = 'ws';
ttypes.WIRE_RECV = 'wr';
ttypes.CLIENT_SEND_FRAGMENT = 'csf';
ttypes.CLIENT_RECV_FRAGMENT = 'crf';
ttypes.SERVER_SEND_FRAGMENT = 'ssf';
ttypes.SERVER_RECV_FRAGMENT = 'srf';
ttypes.HTTP_HOST = 'http.host';
ttypes.HTTP_METHOD = 'http.method';
ttypes.HTTP_PATH = 'http.path';
ttypes.HTTP_URL = 'http.url';
ttypes.HTTP_STATUS_CODE = 'http.status_code';
ttypes.HTTP_REQUEST_SIZE = 'http.request.size';
ttypes.HTTP_RESPONSE_SIZE = 'http.response.size';
ttypes.LOCAL_COMPONENT = 'lc';
ttypes.ERROR = 'error';
ttypes.CLIENT_ADDR = 'ca';
ttypes.SERVER_ADDR = 'sa';
ttypes.MESSAGE_ADDR = 'ma';
